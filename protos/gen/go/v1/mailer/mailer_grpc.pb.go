// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: v1/mailer/mailer.proto

package mailer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailerServiceClient is the client API for MailerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailerServiceClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (MailerService_SendClient, error)
}

type mailerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailerServiceClient(cc grpc.ClientConnInterface) MailerServiceClient {
	return &mailerServiceClient{cc}
}

func (c *mailerServiceClient) Send(ctx context.Context, opts ...grpc.CallOption) (MailerService_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &MailerService_ServiceDesc.Streams[0], "/mailer.v1.MailerService/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailerServiceSendClient{stream}
	return x, nil
}

type MailerService_SendClient interface {
	Send(*Mail) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type mailerServiceSendClient struct {
	grpc.ClientStream
}

func (x *mailerServiceSendClient) Send(m *Mail) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mailerServiceSendClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MailerServiceServer is the server API for MailerService service.
// All implementations must embed UnimplementedMailerServiceServer
// for forward compatibility
type MailerServiceServer interface {
	Send(MailerService_SendServer) error
	mustEmbedUnimplementedMailerServiceServer()
}

// UnimplementedMailerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailerServiceServer struct {
}

func (UnimplementedMailerServiceServer) Send(MailerService_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMailerServiceServer) mustEmbedUnimplementedMailerServiceServer() {}

// UnsafeMailerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailerServiceServer will
// result in compilation errors.
type UnsafeMailerServiceServer interface {
	mustEmbedUnimplementedMailerServiceServer()
}

func RegisterMailerServiceServer(s grpc.ServiceRegistrar, srv MailerServiceServer) {
	s.RegisterService(&MailerService_ServiceDesc, srv)
}

func _MailerService_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MailerServiceServer).Send(&mailerServiceSendServer{stream})
}

type MailerService_SendServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Mail, error)
	grpc.ServerStream
}

type mailerServiceSendServer struct {
	grpc.ServerStream
}

func (x *mailerServiceSendServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mailerServiceSendServer) Recv() (*Mail, error) {
	m := new(Mail)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MailerService_ServiceDesc is the grpc.ServiceDesc for MailerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mailer.v1.MailerService",
	HandlerType: (*MailerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _MailerService_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "v1/mailer/mailer.proto",
}
