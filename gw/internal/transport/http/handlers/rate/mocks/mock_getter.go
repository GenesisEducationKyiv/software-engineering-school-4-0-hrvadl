// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hrvadl/btcratenotifier/gw/internal/transport/http/handlers/rate (interfaces: Getter)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_getter.go -package=mocks . Getter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockGetter) GetRate(arg0 context.Context) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", arg0)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockGetterMockRecorder) GetRate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockGetter)(nil).GetRate), arg0)
}
