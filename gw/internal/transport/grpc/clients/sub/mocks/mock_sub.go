// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/protos/gen/go/v1/sub (interfaces: SubServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_sub.go -package=mocks github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/protos/gen/go/v1/sub SubServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sub "github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/protos/gen/go/v1/sub"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSubServiceClient is a mock of SubServiceClient interface.
type MockSubServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubServiceClientMockRecorder
}

// MockSubServiceClientMockRecorder is the mock recorder for MockSubServiceClient.
type MockSubServiceClientMockRecorder struct {
	mock *MockSubServiceClient
}

// NewMockSubServiceClient creates a new mock instance.
func NewMockSubServiceClient(ctrl *gomock.Controller) *MockSubServiceClient {
	mock := &MockSubServiceClient{ctrl: ctrl}
	mock.recorder = &MockSubServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubServiceClient) EXPECT() *MockSubServiceClientMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSubServiceClient) Subscribe(arg0 context.Context, arg1 *sub.SubscribeRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubServiceClientMockRecorder) Subscribe(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubServiceClient)(nil).Subscribe), varargs...)
}
