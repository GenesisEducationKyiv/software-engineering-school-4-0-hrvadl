services:
  gw:
    build:
      context: gw
      dockerfile: ./Dockerfile
    image: gw
    restart: on-failure
    ports:
      - "8080:${GATEWAY_PORT}"
    depends_on:
      - sub
      - rw
      - mailer
    env_file:
      - .env
    networks:
      - converter

  sub:
    build:
      context: sub
      dockerfile: ./Dockerfile
    image: sub
    restart: on-failure
    depends_on:
      migrate:
        condition: service_completed_successfully
      rw:
        condition: service_started
      nats:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - converter

  rw:
    build:
      context: rw
      dockerfile: ./Dockerfile
    image: rw
    restart: on-failure
    env_file:
      - .env
    networks:
      - converter

  mailer:
    build:
      context: mailer
      dockerfile: ./Dockerfile
    image: mailer
    restart: on-failure
    depends_on:
      nats:
        condition: service_healthy
      debezium:
        condition: service_healthy
      mongo:
        condition: service_started
    env_file:
      - .env
    networks:
      - converter

  db:
    image: mysql:8.0-debian
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      start_period: 5s
      interval: 3s
      timeout: 3s
      retries: 30
    command:
      - --log-bin=binlog
      - --binlog-format=ROW
      - --server-id=1
      - --binlog-do-db=${MYSQL_DATABASE}
    env_file:
      - .env
    volumes:
      - converterdata:/var/lib/mysql
    networks:
      - converter

  migrate:
    image: migrate/migrate
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - converter
    volumes:
      - ./sub/migrations:/database
    command: ["-path", "/database", "-database", "mysql://${SUB_DSN}", "up"]

  prometheus:
    image: prom/prometheus:latest
    command:
      - --web.enable-remote-write-receiver
      - --enable-feature=native-histograms
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - "./infra/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - converter

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      - converter

  grafana:
    image: grafana/grafana:10.1.2
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - ./infra/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - converter

  nats:
    image: nats:2.10.16-alpine3.19
    healthcheck:
      test: wget http://localhost:8222/healthz -q -S -O -
      start_period: 3s
      retries: 3
      timeout: 3s
      interval: 14s
    ports:
      - 4222:4222
      - 8222:8222
    command:
      - "--debug"
      - "--http_port=8222"
      - "--jetstream"
    networks:
      - converter

  debezium:
    image: docker.io/debezium/server:latest
    volumes:
      - ./infra/debezium/:/debezium/conf
    healthcheck:
      test: curl --silent http://localhost:8080/q/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - migrate
      - nats
    networks:
      - converter

  mongo:
    image: mongo:4.4.6
    restart: always
    env_file:
      - .env
    networks:
      - converter
    volumes:
      - notifierdata:/data/db

networks:
  converter:
    driver: bridge

volumes:
  converterdata: {}
  notifierdata: {}
