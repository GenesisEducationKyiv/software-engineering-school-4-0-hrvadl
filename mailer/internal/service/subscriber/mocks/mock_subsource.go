// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/mailer/internal/service/subscriber (interfaces: SubscriberSource)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_subsource.go -package=mocks . SubscriberSource
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	subscriber "github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/mailer/internal/storage/subscriber"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscriberSource is a mock of SubscriberSource interface.
type MockSubscriberSource struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberSourceMockRecorder
}

// MockSubscriberSourceMockRecorder is the mock recorder for MockSubscriberSource.
type MockSubscriberSourceMockRecorder struct {
	mock *MockSubscriberSource
}

// NewMockSubscriberSource creates a new mock instance.
func NewMockSubscriberSource(ctrl *gomock.Controller) *MockSubscriberSource {
	mock := &MockSubscriberSource{ctrl: ctrl}
	mock.recorder = &MockSubscriberSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriberSource) EXPECT() *MockSubscriberSourceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSubscriberSource) Delete(arg0 context.Context, arg1 subscriber.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubscriberSourceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubscriberSource)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockSubscriberSource) GetAll(arg0 context.Context) ([]subscriber.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]subscriber.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubscriberSourceMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubscriberSource)(nil).GetAll), arg0)
}

// Save mocks base method.
func (m *MockSubscriberSource) Save(arg0 context.Context, arg1 subscriber.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSubscriberSourceMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSubscriberSource)(nil).Save), arg0, arg1)
}
