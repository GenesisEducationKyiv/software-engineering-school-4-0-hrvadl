// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/mailer/internal/service/cron (interfaces: SubscribersGetter)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_subgetter.go -package=mocks . SubscribersGetter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	subscriber "github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/mailer/internal/storage/subscriber"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscribersGetter is a mock of SubscribersGetter interface.
type MockSubscribersGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribersGetterMockRecorder
}

// MockSubscribersGetterMockRecorder is the mock recorder for MockSubscribersGetter.
type MockSubscribersGetterMockRecorder struct {
	mock *MockSubscribersGetter
}

// NewMockSubscribersGetter creates a new mock instance.
func NewMockSubscribersGetter(ctrl *gomock.Controller) *MockSubscribersGetter {
	mock := &MockSubscribersGetter{ctrl: ctrl}
	mock.recorder = &MockSubscribersGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribersGetter) EXPECT() *MockSubscribersGetterMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockSubscribersGetter) GetAll(arg0 context.Context) ([]subscriber.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]subscriber.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubscribersGetterMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubscribersGetter)(nil).GetAll), arg0)
}
