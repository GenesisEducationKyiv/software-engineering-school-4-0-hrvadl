// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/rw/internal/transport/nats/publisher/ratewatcher (interfaces: RateSource)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_source.go -package=mocks . RateSource
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRateSource is a mock of RateSource interface.
type MockRateSource struct {
	ctrl     *gomock.Controller
	recorder *MockRateSourceMockRecorder
}

// MockRateSourceMockRecorder is the mock recorder for MockRateSource.
type MockRateSourceMockRecorder struct {
	mock *MockRateSource
}

// NewMockRateSource creates a new mock instance.
func NewMockRateSource(ctrl *gomock.Controller) *MockRateSource {
	mock := &MockRateSource{ctrl: ctrl}
	mock.recorder = &MockRateSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateSource) EXPECT() *MockRateSourceMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockRateSource) Convert(arg0 context.Context) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", arg0)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert.
func (mr *MockRateSourceMockRecorder) Convert(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockRateSource)(nil).Convert), arg0)
}
