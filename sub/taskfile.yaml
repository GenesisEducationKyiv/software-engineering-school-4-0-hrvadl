version: "3"

includes:
  depl:
    taskfile: ./infra/taskfile.yaml
    dir: ./infra

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list-all
  run:
    desc: "Populate env from .env file and run service"
    deps: [install:godotenv]
    cmds:
      - godotenv -f ../.env task run-with-env
  run-with-env:
    required:
      vars:
        - SUB_PORT
        - SUB_LOG_LEVEL
        - MAILER_ADDR
        - RATE_WATCH_ADDR
        - SUB_DSN
    cmds:
      - go run ./cmd/server
  format:
    desc: "Run gofumpt"
    deps: [install:gofumpt]
    cmds:
      - echo "Running formatter..."
      - gofumpt -l -w -e .
  lint:
    desc: "Run golangci-lint"
    deps: [install:lint]
    cmds:
      - echo "Running linters..."
      - golangci-lint run
    sources:
      - .golangci.yaml
      - ./**/*.go
      - go.mod
      - go.sum
  update:mod:
    cmds:
      - go get -u ./...

  tidy:mod:
    cmds:
      - go mod tidy
  test:
    desc: "Run tests"
    cmds:
      - echo "Running tests..."
      - mkdir -p bin
      - go test -coverprofile bin/cover.out ./...
    sources:
      - ./**/*.go
      - go.mod
      - go.sum
    generates:
      - bin/cover.out

  test:cover:
    desc: "Run tests & show coverage"
    deps:
      - test
    cmds:
      - go tool cover -func bin/cover.out

  test:race:
    desc: "Run tests with a race flag"
    cmds:
      - go test -race -count=8 -failfast ./...

  test:integration:
    deps: [install:godotenv]
    desc: "Run integration tests"
    cmds:
      - godotenv -f .env.test task test:integration-with-env -- {{ .CLI_ARGS }}

  test:integration-with-env:
    vars:
      MIGRATIONS_SOURCE: "./migrations"
      SUB_TEST_NATS_CONTAINER_NAME: "nats-test"
      SUB_TEST_DB_CONTAINER_NAME: "testdb_mysql"
    deps:
      - task: create:db
        vars:
          CONTAINER_NAME: "{{ .SUB_TEST_DB_CONTAINER_NAME }}"
      - task: create:nats
        vars:
          CONTAINER_NAME: "{{ .SUB_TEST_NATS_CONTAINER_NAME }}"
          PORT: "{{ .SUB_TEST_NATS_PORT }}"
    cmds:
      - task: migrate:db
        vars:
          MIGRATIONS_SOURCE: "{{ .MIGRATIONS_SOURCE }}"
      - defer:
          task: cleanup:db
          vars:
            CONTAINER_NAME: "{{ .SUB_TEST_DB_CONTAINER_NAME }}"
      - defer:
          task: cleanup:nats
          vars:
            CONTAINER_NAME: "{{ .SUB_TEST_NATS_CONTAINER_NAME }}"
      - go test -tags=integration ./... {{ .CLI_ARGS }}

  create:db:
    desc: "Create DB for integration tests"
    requires:
      vars:
        - SUB_TEST_MYSQL_DATABASE
        - SUB_TEST_MYSQL_ROOT_PASSWORD
        - SUB_TEST_MYSQL_HOSTNAME
        - SUB_TEST_MYSQL_PORT
        - CONTAINER_NAME
    deps:
      - task: cleanup:db
        vars:
          CONTAINER_NAME: "{{ .SUB_TEST_CONTAINER_NAME }}"
    cmds:
      - |
        docker run -d --name {{ .CONTAINER_NAME }} \
        -p {{ .SUB_TEST_MYSQL_PORT }}:3306 \
        -e MYSQL_ROOT_PASSWORD={{ .SUB_TEST_MYSQL_ROOT_PASSWORD }} \
        -e MYSQL_DATABASE={{ .SUB_TEST_MYSQL_DATABASE }} \
        mysql:latest \
      - task: healthcheck:db
        vars:
          CONTAINER_NAME: "{{ .CONTAINER_NAME }}"

  create:nats:
    requires:
      vars:
        - CONTAINER_NAME
        - PORT
    cmds:
      - docker run -d --name {{ .CONTAINER_NAME }} -p {{ .PORT }}:4222 nats-streaming --js
      - task: healthcheck:nats
        vars:
          NATS_TEST_PORT: "{{ .PORT }}"
          CONTAINER_NAME: "{{ .CONTAINER_NAME }}"

  healthcheck:nats:
    requires:
      vars:
        - NATS_TEST_PORT
        - CONTAINER_NAME
    cmds:
      - |
        function check_health() {
          docker exec -t {{ .CONTAINER_NAME }} wget http://localhost:8222/healthz -q -S -O -
        }

        while [ "$check_health" -gt 0 ]; do
          sleep 3
          echo "NATS is not healthy..."
        done
        echo "NATS is healthy!"

  healthcheck:db:
    desc: "Block execution until test db is healthy"
    requires:
      vars:
        - CONTAINER_NAME
    cmds:
      - |
        function check_health() {
          docker exec -t {{ .CONTAINER_NAME }} mysqladmin ping -h localhost | grep "mysqld is alive" 
        }

        until check_health; do
          echo "mysql is not healthy..."
          sleep 3
        done
        echo "mysql is healthy!"
        sleep 5

  cleanup:nats:
    desc: "Cleanup test NATS"
    requires:
      vars: [CONTAINER_NAME]
    cmds:
      - cmd: docker stop "{{ .CONTAINER_NAME }}"
        ignore_error: true
      - cmd: docker rm "{{ .CONTAINER_NAME }}"
        ignore_error: true

  cleanup:db:
    desc: "Cleanup test DB"
    requires:
      vars: [CONTAINER_NAME]
    cmds:
      - cmd: docker stop "{{ .CONTAINER_NAME }}"
        ignore_error: true
      - cmd: docker rm "{{ .CONTAINER_NAME }}"
        ignore_error: true

  migrate:db:
    required:
      vars:
        - MIGRATIONS_SOURCE
    cmds:
      - docker run --rm --name migrator -v {{ .MIGRATIONS_SOURCE }}:/database --network host migrate/migrate -path="/database" -database "mysql://{{ .SUB_TEST_DSN }}" up
      -

  generate:
    desc: "Generate (used for mock generation)"
    deps: [install:mock]
    cmds:
      - echo "Running generators..."
      - go generate ./...
    sources:
      - ./**/*.go
      - go.mod
      - go.sum

  install:
    desc: "Install all tools"
    deps:
      - install:lint
      - install:gofumpt
      - install:mock

  install:lint:
    desc: "Install golangci-lint"
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    status:
      - command -v golangci-lint

  install:gofumpt:
    desc: "Install gofumpt"
    cmds:
      - go install mvdan.cc/gofumpt@latest
    status:
      - command -v gofumpt

  install:migrate:
    desc: "Install gomidrate"
    cmds:
      - go install github.com/golang-migrate/migrate/cmd/migrate
    status:
      - command migrate -help

  install:mock:
    desc: "Install mockgen"
    cmds:
      - go install go.uber.org/mock/mockgen@latest
    status:
      - command -v mockgen
  install:godotenv:
    desc: "Install go dot env lib"
    cmds:
      - go install github.com/joho/godotenv/cmd/godotenv@latest
    status:
      - command godotenv
