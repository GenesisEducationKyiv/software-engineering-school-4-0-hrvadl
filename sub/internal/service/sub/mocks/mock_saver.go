// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/sub/internal/service/sub (interfaces: RecipientSaver)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_saver.go -package=mocks . RecipientSaver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	subscriber "github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/sub/internal/storage/subscriber"
	gomock "go.uber.org/mock/gomock"
)

// MockRecipientSaver is a mock of RecipientSaver interface.
type MockRecipientSaver struct {
	ctrl     *gomock.Controller
	recorder *MockRecipientSaverMockRecorder
}

// MockRecipientSaverMockRecorder is the mock recorder for MockRecipientSaver.
type MockRecipientSaverMockRecorder struct {
	mock *MockRecipientSaver
}

// NewMockRecipientSaver creates a new mock instance.
func NewMockRecipientSaver(ctrl *gomock.Controller) *MockRecipientSaver {
	mock := &MockRecipientSaver{ctrl: ctrl}
	mock.recorder = &MockRecipientSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipientSaver) EXPECT() *MockRecipientSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockRecipientSaver) Save(arg0 context.Context, arg1 subscriber.Subscriber) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRecipientSaverMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRecipientSaver)(nil).Save), arg0, arg1)
}
