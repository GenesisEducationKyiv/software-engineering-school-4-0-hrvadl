// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/sub/internal/service/sub (interfaces: RecipientSource)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_src.go -package=mocks . RecipientSource
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	subscriber "github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/sub/internal/storage/subscriber"
	gomock "go.uber.org/mock/gomock"
)

// MockRecipientSource is a mock of RecipientSource interface.
type MockRecipientSource struct {
	ctrl     *gomock.Controller
	recorder *MockRecipientSourceMockRecorder
}

// MockRecipientSourceMockRecorder is the mock recorder for MockRecipientSource.
type MockRecipientSourceMockRecorder struct {
	mock *MockRecipientSource
}

// NewMockRecipientSource creates a new mock instance.
func NewMockRecipientSource(ctrl *gomock.Controller) *MockRecipientSource {
	mock := &MockRecipientSource{ctrl: ctrl}
	mock.recorder = &MockRecipientSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipientSource) EXPECT() *MockRecipientSourceMockRecorder {
	return m.recorder
}

// DeleteByEmail mocks base method.
func (m *MockRecipientSource) DeleteByEmail(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByEmail indicates an expected call of DeleteByEmail.
func (mr *MockRecipientSourceMockRecorder) DeleteByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByEmail", reflect.TypeOf((*MockRecipientSource)(nil).DeleteByEmail), arg0, arg1)
}

// GetByEmail mocks base method.
func (m *MockRecipientSource) GetByEmail(arg0 context.Context, arg1 string) (*subscriber.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*subscriber.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockRecipientSourceMockRecorder) GetByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockRecipientSource)(nil).GetByEmail), arg0, arg1)
}

// Save mocks base method.
func (m *MockRecipientSource) Save(arg0 context.Context, arg1 subscriber.Subscriber) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRecipientSourceMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRecipientSource)(nil).Save), arg0, arg1)
}
