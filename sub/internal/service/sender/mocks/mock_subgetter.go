// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hrvadl/btcratenotifier/sub/internal/service/sender (interfaces: SubscriberGetter)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_subgetter.go -package=mocks . SubscriberGetter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	subscriber "github.com/hrvadl/btcratenotifier/sub/internal/storage/subscriber"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscriberGetter is a mock of SubscriberGetter interface.
type MockSubscriberGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberGetterMockRecorder
}

// MockSubscriberGetterMockRecorder is the mock recorder for MockSubscriberGetter.
type MockSubscriberGetterMockRecorder struct {
	mock *MockSubscriberGetter
}

// NewMockSubscriberGetter creates a new mock instance.
func NewMockSubscriberGetter(ctrl *gomock.Controller) *MockSubscriberGetter {
	mock := &MockSubscriberGetter{ctrl: ctrl}
	mock.recorder = &MockSubscriberGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriberGetter) EXPECT() *MockSubscriberGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSubscriberGetter) Get(arg0 context.Context) ([]subscriber.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]subscriber.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubscriberGetterMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubscriberGetter)(nil).Get), arg0)
}
