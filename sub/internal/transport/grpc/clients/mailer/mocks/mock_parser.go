// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/protos/gen/go/v1/mailer (interfaces: MailerServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_parser.go -package=mocks github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/protos/gen/go/v1/mailer MailerServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mailer "github.com/GenesisEducationKyiv/software-engineering-school-4-0-hrvadl/protos/gen/go/v1/mailer"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMailerServiceClient is a mock of MailerServiceClient interface.
type MockMailerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMailerServiceClientMockRecorder
}

// MockMailerServiceClientMockRecorder is the mock recorder for MockMailerServiceClient.
type MockMailerServiceClientMockRecorder struct {
	mock *MockMailerServiceClient
}

// NewMockMailerServiceClient creates a new mock instance.
func NewMockMailerServiceClient(ctrl *gomock.Controller) *MockMailerServiceClient {
	mock := &MockMailerServiceClient{ctrl: ctrl}
	mock.recorder = &MockMailerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailerServiceClient) EXPECT() *MockMailerServiceClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMailerServiceClient) Send(arg0 context.Context, arg1 *mailer.Mail, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMailerServiceClientMockRecorder) Send(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailerServiceClient)(nil).Send), varargs...)
}
